    name: Build and Deploy StockTrader API to AWS ECS

    on:
      push:
        branches:
          - main # Or your primary branch, e.g., master
      # Optionally, trigger on pull requests to main for CI checks (build and test)
      # pull_request:
      #   branches:
      #     - main

    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: stocktrader-api # The name of your ECR repository
      ECS_CLUSTER_NAME: stocktrader-fargate-cluster # Your ECS Cluster name (e.g., tradecraft-fargate-cluster or stocktrader-fargate-cluster)
      ECS_SERVICE_NAME: stocktrader-api-service # Your ECS Service name (e.g., tradecraft-api-service or stocktrader-api-service)
      ECS_TASK_DEFINITION_FAMILY: tradecraft-api-task # Your ECS Task Definition Family name (e.g., tradecraft-api-task or stocktrader-api-task)
      CONTAINER_NAME: stocktrader-api-container # The name of the container defined in your Task Definition
      DOTNET_VERSION: '8.0.x'

    jobs:
      build-and-push-to-ecr:
        name: Build and Push to ECR
        runs-on: ubuntu-latest # Use a Linux runner

        steps:
          - name: Checkout code
            uses: actions/checkout@v4

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ env.AWS_REGION }}

          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v2

          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3

          - name: Build, tag, and push image to Amazon ECR
            id: build-image
            env:
              ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} # ECR registry URI from login step
              IMAGE_TAG: ${{ github.sha }} # Use the Git commit SHA as a unique image tag
            run: |
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
              docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
              echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      deploy-to-ecs:
        name: Deploy to ECS
        runs-on: ubuntu-latest
        needs: build-and-push-to-ecr # This job runs only if build-and-push-to-ecr succeeds

        steps:
          - name: Checkout code
            uses: actions/checkout@v4 # Needed if your task definition is in your repo, otherwise optional

          - name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ env.AWS_REGION }}

          - name: Download task definition (Optional - if you manage it in a file)
            # If your task definition JSON is stored in your repository (e.g., task-definition.json),
            # you can use it. Otherwise, the action can fetch the latest active one.
            # run: aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} --query taskDefinition > task-definition.json
            # For simplicity, we'll let the aws-actions/amazon-ecs-deploy-task-definition action
            # update the image in the latest active task definition revision.

          - name: Fill in the new image ID in the Amazon ECS task definition
            id: task-def
            uses: aws-actions/amazon-ecs-render-task-definition@v1
            with:
              task-definition: ${{ env.ECS_TASK_DEFINITION_FAMILY }} # Use the family name to get the latest active revision
              container-name: ${{ env.CONTAINER_NAME }}
              image: ${{ needs.build-and-push-to-ecr.outputs.image_uri }} # Use the image URI from the build job

          - name: Deploy Amazon ECS task definition
            uses: aws-actions/amazon-ecs-deploy-task-definition@v1
            with:
              task-definition: ${{ steps.task-def.outputs.task-definition }} # The path to the rendered task definition file
              service: ${{ env.ECS_SERVICE_NAME }}
              cluster: ${{ env.ECS_CLUSTER_NAME }}
              wait-for-service-stability: true # Wait for the new deployment to become stable
    